#!/bin/sh

# Standardwerte setzen
time_left=""
title=""

# Eingaben parsen
while [ "$#" -gt 0 ]; do
    case "$1" in
        -t|--title)
            shift
            title="$1"
            ;;
        -h|--help)
            echo 'Hilfe zur Benutzung:'
            echo '  Aufruf: timer [Zeit] [-t|--title "Titel des Timers"]'
            echo '  Jede Zahl muss eine Einheit haben (d, h, m, s).'
            echo '  Zeit kann kombiniert werden: 1h30m2s (Stunden, Minuten, Sekunden)'
            echo '  Einheiten: s (Sekunden), m (Minuten), h (Stunden), d (Tage)'
            exit 0
            ;;
        *)
            if [ -z "$time_left" ]; then
                time_left="$1"
            else
                echo "Unbekannte Option: $1"
                exit 1
            fi
            ;;
    esac
    shift
done

# Prüfen, ob eine gültige Zeit angegeben wurde
if [ -z "$time_left" ]; then
    echo 'Fehlende Zeitangabe!'
    echo '  Aufruf: timer [Zeit] [-t|--title "Titel des Timers"]'
    echo '  Jede Zahl muss eine Einheit haben (d, h, m, s).'
    echo '  Zeit kann kombiniert werden: 1h30m2s (Stunden, Minuten, Sekunden)'
    echo '  Einheiten: s (Sekunden), m (Minuten), h (Stunden), d (Tage)'
    exit 1
fi

# Prüfe auf ungültige Zeichen (nur Zahlen und dhms erlaubt)
if echo "$time_left" | grep -qE '[^0-9dhms]'; then
    echo "Fehler: Ungültige Zeichen in der Eingabe!"
    exit 1
fi

# Prüfe auf ungültige Formate (verhindert z.B. 3m15 oder 1m59)
if ! echo "$time_left" | grep -qE '^[0-9]+[dhms]([0-9]+[hms]){0,3}$'; then
    echo "Fehler: Ungültiges Format. Jede Zahl muss eine Einheit haben (d, h, m, s)."
    echo "  Beispiel für gültiges Format: 1h30m5s"
    exit 1
fi

# Prüfe auf falsche Reihenfolge oder doppelte Einheiten (z.B. 3s60h60d oder 2h5m3h)
if echo "$time_left" | grep -qE '.*[s].*[mhd]|.*[m].*[hd]|.*[h].*[d]'; then
    echo "Fehler: Ungültige Reihenfolge oder doppelte Einheiten."
    echo "  Die richtige Reihenfolge ist: Tage(d), Stunden(h), Minuten(m), Sekunden(s)."
    echo "  Beispiel für gültiges Format: 1d2h30m5s"
    exit 1
fi


# Die Zeitangabe in Sekunden umwandeln - Neue komplexe Verarbeitung
time_in_seconds=0

# Extrahiere Stunden
hours=$(echo "$time_left" | grep -o '[0-9]\+h' | sed 's/h//')
if [ -n "$hours" ]; then
    time_in_seconds=$(( time_in_seconds + hours * 3600 ))
fi

# Extrahiere Minuten
minutes=$(echo "$time_left" | grep -o '[0-9]\+m' | sed 's/m//')
if [ -n "$minutes" ]; then
    time_in_seconds=$(( time_in_seconds + minutes * 60 ))
fi

# Extrahiere Sekunden
seconds=$(echo "$time_left" | grep -o '[0-9]\+s' | sed 's/s//')
if [ -n "$seconds" ]; then
    time_in_seconds=$(( time_in_seconds + seconds ))
fi

# Extrahiere Tage
days=$(echo "$time_left" | grep -o '[0-9]\+d' | sed 's/d//')
if [ -n "$days" ]; then
    time_in_seconds=$(( time_in_seconds + days * 86400 ))
fi

# Wenn keine Einheit angegeben wurde, interpretiere die Eingabe als Sekunden
if [ "$time_in_seconds" -eq 0 ]; then
    if echo "$time_left" | grep -q '^[0-9]\+$'; then
        time_in_seconds=$time_left
    fi
fi

# Prüfen, ob die Zeit valid ist
if [ "$time_in_seconds" -le 0 ]; then
    echo "Ungültige Zeitangabe: $time_left"
    exit 1
fi

# Original-Zeit für die Anzeige speichern
original_time=$time_in_seconds

# Funktion zur Umrechnung der verbleibenden Zeit in hh:mm:ss
format_time() {
    local total_seconds=$1
    local hours=$((total_seconds / 3600))
    local minutes=$(( (total_seconds % 3600) / 60 ))
    local seconds=$((total_seconds % 60))
    printf "%02d:%02d:%02d" $hours $minutes $seconds
}

# Titel setzen
if [ -z "$title" ]; then
    formatted_time=$(format_time $time_in_seconds)
    print_title="$formatted_time"
else
    print_title="$title"
fi

# YAD Progress Bar korrekt konfigurieren
(
    # Initialisierung mit 0%
    echo "0"
    
    while [ "$time_in_seconds" -gt 0 ]; do
        # Prozentsatz berechnen: (original - verbleibend) / original * 100
        percentage=$(( (original_time - time_in_seconds) * 100 / original_time ))
        
        # Formatierte Zeit
        formatted_time=$(format_time $time_in_seconds)
        
        # Aktualisierung mit Prozent und Text
        echo "$percentage"
        echo "# Verbleibende Zeit: $formatted_time\n"
        
        sleep 1
        time_in_seconds=$((time_in_seconds - 1))
    done
    
    # 100% am Ende
    echo "100"
    echo "# ⏰ Timer abgelaufen!\n"
    
) | yad --no-escape --on-top --sticky --progress --title="Timer läuft..." --text-align=center --text="<span font_desc='Vera Sans mono 13' foreground='#7abb95'>$print_title\n</span>" --width=400 --height=150 &

# Warten auf Ablauf und dann Aktionen starten
(sleep "$original_time" && espeak-ng -vGerman "Timer \"$print_title\" ist abgelaufen") &
(sleep "$original_time" && zenity --notification --text "Timer \"$print_title\" ist abgelaufen\n$(date)" 2>/dev/null) &
(sleep "$original_time" && echo -e "\n\e[1;31m$(date)\n    !!! Timer \"$print_title\" ist abgelaufen!!!\e[0m") &

# In Syslog schreiben (FreeBSD-Format)
(sleep "$original_time" && logger "!!! Timer \"$print_title\" ist abgelaufen!!!") &

exit 0
